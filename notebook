CI/CD on CircleCI

1. Config

- Build
- Test

https://circleci.com/docs/2.0/sample-config/

2. Push

- Deploy

https://circleci.com/orbs/registry/orb/circleci/aws-ecr

-----

Image Repository

- Create ECR manually
- Create ECR through Terraform

-----

VPC 

Components:

- 1 VPC
- 1 Internet Gateway
- 1 Route table rule for Internet Gateway (Default)
- N Availability Zones
- N Public subnets
- N Private subnets
- N NAT Gateways (+2 EIPs)
- N Route table rule for NAT Gateway (Custom)

- 1 ELB

N = Number of AZs we will deploy

Architecture:

1. All public

- Deploy your instances in a public subnet
- Secure through Security Groups and ACLs

Pro:
- Simplicity
- Reduced cost

Con:
- As different images and services gets deployed, it gets harder to secure each one
- Increase the surface of attack

2. Bastion host

- Deploy a Bastion Host in a public subnet
- Allow SSH inbound traffic to the Bastion host
- Deploy a NAT Gateway
- Deploy your services in a private subnet (possibly using a VPC Endpoint instead of a NAT Gateway, when internet access not required, for reduced cost)
- Allow outbound traffic from your services through the NAT Gateway
- Allow inbound SSH from your Bastion Host's Security Group

Pro:
- You only have to worry about your Bastion Host's vulnerability (smaller attack surface)

Con:
- Cost (+Bastion's EC2, +NAT Gateway, +Auto Scaling Group for Bastion [possibly]...)
- Complexity (more infrastructure to maintain)
- It gets harder to access non-ssh resources such as databases 
- Tooling may get trickier, some tools will allow you to tunnel throught the Bastion but some won't...

3. VPN

- Deploy your instances into a private subnet
- Configure your Virtual Private Gateway
- Configure your Customer Gateway
- Allow inbound SSH from your on-premises network

Pro:
- No problem with tools since you're basically extending your internal network to the cloud
- You will be able to access any resources via any port, as long your ACLs and Security Groups allows it
- Can be used with any other method above to increase your Security

Con:
- Configuring a VPN is not trivial and may require specific hardware
- Now you have additional infrastructure to keep watch (monitoring)

Z. References:

Architecture
- https://containersonaws.com/architecture/public-service-private-network/
- https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenarios.html
- https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html

Bastion hosts
- https://www.youtube.com/watch?time_continue=4&v=JwLGsWYVjqU
- https://aws.amazon.com/pt/blogs/mt/replacing-a-bastion-host-with-amazon-ec2-systems-manager/
- https://medium.com/@henriksylvesterpedersen/you-dont-need-that-bastion-host-cd1b1717a9e7
- https://www.reddit.com/r/aws/comments/8vndl3/you_dont_need_that_bastion_host/
- https://docs.aws.amazon.com/quickstart/latest/linux-bastion/overview.html

AWS Site-to-Site VPN
- https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html
- https://docs.aws.amazon.com/vpc/latest/adminguide/Introduction.html

AWS Client VPN
- https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html

-----

Load Balancer

ALB vs NLB:
- https://medium.com/containers-on-aws/using-aws-application-load-balancer-and-network-load-balancer-with-ec2-container-service-d0cb0b1d5ae5

Target Groups:
- https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#registered-targets

-----

TO DO

- Criar role para EC2

Attachar policy AmazonEC2RoleforSSM
Attachar policy AmazonEC2ContainerServiceforEC2Role

- Criar Security Group para instancias do ECS

Allow * from ELB Security Group

- Criar Security Group para ELB

Allow 80 from Everyone

- Criar Launch Configuration

- Instalar SSM Agent via User-Data via User-Data do Launch Configuration

#!/bin/bash
# Install JQ JSON parser
yum install -y jq

# Get the current region from the instance metadata
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)

# Install the SSM agent RPM
yum install -y https://amazon-ssm-$region.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm

- Criar Auto Scaling Group

*** Check how Terraform handle changes to the Launch Configuration associated to this Auto Scaling Group

- Criar ELB
-- Listener
-- Target Group

- Criar Task Definition

- Criar Service

- Database

- Continuous Delivery (CodeDeploy? Lambda?)

- Put ConnectionString on Parameter Store

- Update the ContainerDefinition with credentials from Parameter Store

- Migrations

- Others: Terraform Backend, TFVARS file, Tags, Auto Scale properly (instances and containers)